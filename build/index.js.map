{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;;AAEhC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;EAC7B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AACtB;;AAEA,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;EAiB/B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,KAAK,CAAC,OAAO;IACb,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,GAAG,CAAC;QACJ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;UACV,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW;QACpC,CAAC,CAAC,IAAI,CAAC;UACL,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW;QACrC;QACA,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;MACtB,CAAC;MACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAClB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACN,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB,EAAE,CAAC,IAAI,CAAC,IAAI;MACd;IACF,CAAC;EACH;EACA,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK;IAC3B,QAAQ,CAAC;EACX;;EAEA,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,IAAI,CAAC;EACd;AACF;;;;;;;;;AASA,MAAM,CAAC,OAAO,CAAC","file":"index.js","sourcesContent":["import { Writable } from 'stream'\n\nfunction joinBufferData(array) {\n  return array.join('')\n}\n\nclass Catchment extends Writable {\n  /**\n   * Create a new catchment to pipe a readable stream into and collect all\n   * emitted data.\n   * @constructor\n   * @param {Object} options Options to pass to `Writable` the super constructor, and other shown below.\n   * @param {Readable} [options.rs] A readable stream to automatically pipe into the catchment. If an error occurs in that stream, the catchment promise will be rejected.\n   * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n   * @example\n   *\n   * import { createReadStream } from 'fs'\n   * import Catchment from 'catchment'\n   *\n   * const rs = createReadStream('file.txt')\n   * const { promise } = new Catchment({ rs })\n   * const res = await promise\n   */\n  constructor(options = {}) {\n    super(options)\n    const { binary, rs } = options\n    this._caughtData = []\n    this._promise = new Promise((r, j) => {\n      this.on('finish', () => {\n        let d\n        if (binary) {\n          d = Buffer.concat(this._caughtData)\n        } else {\n          d = joinBufferData(this._caughtData)\n        }\n        r(d)\n        this._caughtData = []\n      })\n      this.on('error', j)\n      if (rs) {\n        rs.on('error', j)\n        rs.pipe(this)\n      }\n    })\n  }\n  _write(chunk, encoding, callback) {\n    this._caughtData.push(chunk)\n    callback()\n  }\n  /** @type {Promise.<string|Buffer>} */\n  get promise() {\n    return this._promise\n  }\n}\n\n/**\n * @typedef {import('stream').Readable} Readable\n * @typedef {Object} Options Options to pass to `Writable` the super constructor, and other shown below.\n * @prop {Readable} rs A readable stream to automatically pipe into the catchment.\n * @prop {boolean} binary Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method.\n */\n\nexport default Catchment\n"]}